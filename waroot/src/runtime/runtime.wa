// 版权 @2019 凹语言 作者。保留所有权利。

// K&R 第8章 首次适配算法的 malloc 实现

// sizeof(knr_Header) 大小
const sizeof_Header = 8

#wa:linkname $knr_basep
global knr_basep: u32

#wa:linkname $knr_freep
global knr_freep: u32

// K&R malloc 实现, Block 头部
type knr_Header :struct {
	ptr:  u32
	size: u32
}

// 抛出异常
#wa:linkname runtime.throw
func throw()

// Heap 开始地址
#wa:linkname runtime.heapBase
func heapBase() => u32

// Heap 最大地址(闭区间)
#wa:linkname runtime.heapMax
func heapMax() => u32

#wa:runtime_getter
func knr_getBlockHeader(p: u32) => knr_Header

#wa:runtime_setter
func knr_setBlockHeader(p: u32, hdr: knr_Header)

// 分配 nbytes 字节, 返回地址
#wa:force_register
func malloc(nbytes: u32) => u32 {
	if nbytes == 0 || nbytes >= (heapMax()-knr_basep) {
		return 0
	}
	if knr_basep == 0 {
		knr_basep = heapBase()
		knr_freep = knr_basep

		base := knr_Header{
			ptr:  knr_basep,
			size: (heapMax()-knr_basep)/sizeof_Header - 1,
		}

		knr_setBlockHeader(knr_basep, base)
	}

	// round up to allocate in units of sizeof(Header)
	nunits := (nbytes+sizeof_Header-1)/sizeof_Header + 1
	prevp_addr := knr_freep

	// search free linked-list
	prevp := knr_getBlockHeader(prevp_addr)
	p_addr := prevp.ptr
	p := knr_getBlockHeader(p_addr)
	for {
		if p.size >= nunits { // big enough
			if p.size == nunits { // exactly
				prevp.ptr = p.ptr
				knr_setBlockHeader(prevp_addr, prevp)
			} else {
				p.size -= nunits
				knr_setBlockHeader(p_addr, p)

				// allocate at tail-end
				p_addr += p.size * sizeof_Header
				p = knr_getBlockHeader(p_addr)
				p.size = nunits
				knr_setBlockHeader(p_addr, p)
			}

			knr_freep = prevp_addr
			return p_addr + sizeof_Header
		}
		if p_addr == knr_freep {
			return 0 // none left
		}

		prevp_addr = p_addr
		prevp = knr_getBlockHeader(prevp_addr)

		p_addr = p.ptr
		p = knr_getBlockHeader(p_addr)
	}
}

// 回收内存, 释放到空闲列表
#wa:force_register
func free(ap: u32) {
	if ap == 0 || ap%sizeof_Header != 0 {
		return
	}

	// point to block header
	bp_addr := ap - sizeof_Header
	bp := knr_getBlockHeader(bp_addr)

	// must be at least 2 units:
	// 1 for header, 1 for mem block
	if bp.size <= 1 {
		// panic
		return
	}

	p_addr := knr_freep
	p := knr_getBlockHeader(p_addr)

	for !(bp_addr > p_addr && bp_addr < p.ptr) {
		// free block at start or end of arena
		if (p_addr >= p.ptr) && (bp_addr > p_addr || bp_addr < p.ptr) {
			break
		}

		p_addr = p.ptr
		p = knr_getBlockHeader(p_addr)
	}

	// join to upper nbr
	if bp_addr+bp.size*sizeof_Header == p.ptr {
		p_ptr := knr_getBlockHeader(p.ptr)
		bp.size += p_ptr.size
		bp.ptr = p_ptr.ptr
		knr_setBlockHeader(bp_addr, bp)
	} else {
		bp.ptr = p.ptr
		knr_setBlockHeader(bp_addr, bp)
	}

	// join to lower nbr
	if p_addr+p.size*sizeof_Header == bp_addr {
		p.size += bp.size
		p.ptr = bp.ptr
		knr_setBlockHeader(p_addr, p)
	} else {
		p.ptr = bp_addr
		knr_setBlockHeader(p_addr, p)
	}

	knr_freep = p_addr
}

#wa:linkname $wa.runtime.i32_ref_to_ptr
func I32_ref_to_ptr(t: *i32) => i32

#wa:linkname $wa.runtime.i64_ref_to_ptr
func I64_ref_to_ptr(t: *i64) => i32

#wa:linkname $wa.runtime.slice_to_ptr
func U8_slice_to_ptr(t: []byte) => i32

#wa:linkname $wa.runtime.string_to_ptr
func U8_string_to_ptr(s: string) => i32

func refToPtr_i32(p: *i32) => i32 {
	return I32_ref_to_ptr(p)
}

func refToPtr_byteSlice(t: []byte) => i32 {
	return U8_slice_to_ptr(t)
}

func refToPtr_string(s: string) => i32 {
	return U8_string_to_ptr(s)
}

type stringIter :struct {
	ptr: uint
	len: int
	pos: int
}

#wa:runtime_getter
func get_u8(p: u32) => u8

#wa:runtime_setter
func set_u8(p: u32, v: u8)

func next_rune(iter: stringIter) => (ok: bool, k: int, v: rune, pos: int) {
	if iter.pos >= iter.len {
		return false, iter.pos, 0, iter.pos
	}

	p0 := i32(get_u8(u32(iter.ptr) + u32(iter.pos)))
	if p0&0b10000000 == 0 {
		return true, iter.pos, rune(p0), iter.pos + 1
	} else if p0&0b11100000 == 0b11000000 {
		p0 = (p0 & 0b11111) << 6
		p1 := i32(get_u8(u32(iter.ptr)+u32(iter.pos)+1)) & 0b00111111
		return true, iter.pos, rune(p0 | p1), iter.pos + 2
	} else if p0&0b11110000 == 0b11100000 {
		p0 = (p0 & 0b1111) << 12
		p1 := (i32(get_u8(u32(iter.ptr)+u32(iter.pos)+1)) & 0b00111111) << 6
		p2 := (i32(get_u8(u32(iter.ptr)+u32(iter.pos)+2)) & 0b00111111)
		return true, iter.pos, rune(p0 | p1 | p2), iter.pos + 3
	} else if p0&0b11111000 == 0b11110000 {
		p0 = (p0 & 0b111) << 18
		p1 := (i32(get_u8(u32(iter.ptr)+u32(iter.pos)+1)) & 0b00111111) << 12
		p2 := (i32(get_u8(u32(iter.ptr)+u32(iter.pos)+2)) & 0b00111111) << 6
		p3 := (i32(get_u8(u32(iter.ptr)+u32(iter.pos)+3)) & 0b00111111)
		return true, iter.pos, rune(p0 | p1 | p2 | p3), iter.pos + 4
	}

	return
}

#wa:linkname $wa.runtime.string_to_iter
func stringToIter(s: string) => stringIter

#wa:linkname $wa.runtime.string_Comp
func string_Comp(x, y: string) => i32 {
	i1 := stringToIter(x)
	i2 := stringToIter(y)

	for {
		o1, _, v1, p1 := next_rune(i1)
		i1.pos = p1
		o2, _, v2, p2 := next_rune(i2)
		i2.pos = p2

		if (o1 && o2) != true {
			break
		}

		if v1 < v2 {
			return -1
		} else if v1 > v2 {
			return 1
		}
	}

	l1 := len(x)
	l2 := len(y)
	if l1 < l2 {
		return -1
	} else if l1 > l2 {
		return 1
	} else {
		return 0
	}
}

#wa:linkname $wa.runtime.string_LSS
func string_LSS(x, y: string) => bool {
	return string_Comp(x, y) == -1
}

#wa:linkname $wa.runtime.string_GTR
func string_GTR(x, y: string) => bool {
	return string_Comp(x, y) == 1
}

#wa:linkname $wa.runtime.string_LEQ
func string_LEQ(x, y: string) => bool {
	return string_Comp(x, y) != 1
}

#wa:linkname $wa.runtime.string_GEQ
func string_GEQ(x, y: string) => bool {
	return string_Comp(x, y) != -1
}

const (
	MaxRune      = '\U0010FFFF'
	RuneError    = '\uFFFD'
	surrogateMin = 0xD800
	surrogateMax = 0xDFFF
	tx           = 0b10000000
	t2           = 0b11000000
	t3           = 0b11100000
	t4           = 0b11110000
	maskx        = 0b00111111

	rune1Max = 1<<7 - 1
	rune2Max = 1<<11 - 1
	rune3Max = 1<<16 - 1
)

func stringFromRune(r: rune) => string {
	p := make([]byte, 0, 4)
	n: i32

	switch i := uint32(r); {
	case i <= rune1Max:
		p[0] = byte(r)
		n = 1
	case i <= rune2Max:
		_ = p[1] // eliminate bounds checks
		p[0] = t2 | byte(r>>6)
		p[1] = tx | byte(r)&maskx
		n = 2
	case i > MaxRune, surrogateMin <= i && i <= surrogateMax:
		r = RuneError
		// fallthrough
		{
			_ = p[2] // eliminate bounds checks
			p[0] = t3 | byte(r>>12)
			p[1] = tx | byte(r>>6)&maskx
			p[2] = tx | byte(r)&maskx
			n = 3
		}
	case i <= rune3Max:
		_ = p[2] // eliminate bounds checks
		p[0] = t3 | byte(r>>12)
		p[1] = tx | byte(r>>6)&maskx
		p[2] = tx | byte(r)&maskx
		n = 3
	default:
		_ = p[3] // eliminate bounds checks
		p[0] = t4 | byte(r>>18)
		p[1] = tx | byte(r>>12)&maskx
		p[2] = tx | byte(r>>6)&maskx
		p[3] = tx | byte(r)&maskx
		n = 4
	}
	return string(p[:n])
}

func stringFromRuneSlice(rs: []rune) => string {
	s: string
	for _, r := range rs {
		s += stringFromRune(r)
	}
	return s
}

func runeSliceFromString(s: string) => []rune {
	rs: []rune
	for _, r := range s {
		rs = append(rs, r)
	}
	return rs
}
