// 版权 @2024 凹语言 作者。保留所有权利。

// WASM4: https://wasm4.org/docs

#wa:linkname $wa.runtime.string_to_ptr
func u8_string_to_ptr(s: string) => i32

#wa:linkname $wa.runtime.slice_to_ptr
func u8_slice_to_ptr(t: []byte) => i32

// 屏幕大小
const SCREEN_SIZE: i32 = 160

// 读调色板
func GetPalette => (u32, u32, u32, u32) {
	a, b, c, d := getPalette()
	return u32(a), u32(b), u32(c), u32(d)
}

#wa:linkname $syscall/wasm4.GetPalette
func getPalette => (i32, i32, i32, i32)

// 写调试板
func SetPalette(a0, a1, a2, a3: u32) {
	setPalette(i32(a0), i32(a1), i32(a2), i32(a3))
}

#wa:linkname $syscall/wasm4.SetPalette
func setPalette(a0, a1, a2, a3: i32)

// 读绘图颜色
func GetDrawColors => u16 {
	x := getDrawColors()
	return u16(x)
}

#wa:linkname $syscall/wasm4.GetDrawColors
func getDrawColors => i32

// 写绘图颜色
func SetDrawColors(a: u16) {
	setDrawColors(i32(a))
}

#wa:linkname $syscall/wasm4.SetDrawColors
func setDrawColors(a: i32)

// 读取控制键

func GetGamePad1 => u8 {
	return u8(getGamePad1())
}
func GetGamePad2 => u8 {
	return u8(getGamePad2())
}
func GetGamePad3 => u8 {
	return u8(getGamePad3())
}
func GetGamePad4 => u8 {
	return u8(getGamePad4())
}

#wa:linkname $syscall/wasm4.GetGamePad1
func getGamePad1 => i32

#wa:linkname $syscall/wasm4.GetGamePad2
func getGamePad2 => i32

#wa:linkname $syscall/wasm4.GetGamePad3
func getGamePad3 => i32

#wa:linkname $syscall/wasm4.GetGamePad4
func getGamePad4 => i32

// 鼠标信息

#wa:linkname $syscall/wasm4.GetMouseX
func GetMouseX => i32

#wa:linkname $syscall/wasm4.GetMouseY
func GetMouseY => i32

#wa:linkname $syscall/wasm4.GetMouseButtons
func GetMouseButtons => i32

// 内存地址
const (
	_SYSTEM_FLAGS :i32 = 0x1f // u8
	_NETPLAY      :i32 = 0x20 // u8
	_FRAMEBUFFER  :i32 = 0xa0 // [6400]u8, 帧缓存
)

// 鼠标键盘

const (
	BUTTON_1     :byte = 1
	BUTTON_2     :byte = 2
	BUTTON_LEFT  :byte = 16
	BUTTON_RIGHT :byte = 32
	BUTTON_UP    :byte = 64
	BUTTON_DOWN  :byte = 128

	MOUSE_LEFT   :byte = 1
	MOUSE_RIGHT  :byte = 2
	MOUSE_MIDDLE :byte = 4

	SYSTEM_PRESERVE_FRAMEBUFFER :byte = 1
	SYSTEM_HIDE_GAMEPAD_OVERLAY :byte = 2
)

// 复制数据到帧缓存
func Blit(sprite: []byte, x, y: i32, width, height, flags: i32) {
	blit(u8_slice_to_ptr(sprite), x, y, width, height, flags)
}

#wa:import env blit
func blit(sprite: i32, x, y: i32, width, height, flags: i32)

// 复制数据到帧缓存(增强版)
#wa:import env blitSub
func BlitSub(sprite: i32, x, y: i32, width, height: i32, srcX, srcY: i32, stride: i32, flags: i32)

// Flags位信息
const (
	BLIT_1BPP   = 0
	BLIT_2BPP   = 1
	BLIT_FLIP_X = 2
	BLIT_FLIP_Y = 4
	BLIT_ROTATE = 8
)

// 绘制线段
#wa:import env line
func Line(x1, y1, x2, y2: i32)

// 绘制水平的线段
#wa:import env hline
func HLine(x, y, len: i32)

// 绘制竖直的线段
#wa:import env vline
func VLine(x, y, len: i32)

// 绘制椭圆或圆
#wa:import env oval
func Oval(x, y, width, height: i32)

// 绘制矩形
#wa:import env rect
func Rect(x, y, width, height: i32)

// 绘制文本
func Text(s: string, x, y: i32) {
	_Text(u8_string_to_ptr(s), i32(len(s)), x, y)
}

#wa:import env textUtf8
func _Text(textPtr, textLen: i32, x, y: i32)

// 播发声音
#wa:import env tone
func Tone(frequency, duration, volume, flags: i32)

const (
	TONE_PULSE1    = 0
	TONE_PULSE2    = 1
	TONE_TRIANGLE  = 2
	TONE_NOISE     = 3
	TONE_MODE1     = 0
	TONE_MODE2     = 4
	TONE_MODE3     = 8
	TONE_MODE4     = 12
	TONE_PAN_LEFT  = 16
	TONE_PAN_RIGHT = 32
	TONE_NOTE_MODE = 64
)

// 读磁盘数据
#wa:import env diskr
func DiskR(ptr, count: i32) => i32

// 写磁盘数据
#wa:import env diskw
func DiskW(src, count: i32) => i32

// 打印调试信息
#wa:import env traceUtf8
func Trace(msgPtr, msgLen: i32)
