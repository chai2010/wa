
import "js"

/*
不能使用该类型直接声明值，需通过 Adapter.RequestDevice() 创建
*/
type Device struct {
    js.ExtObj
}

#wa:import webgpu create_shader_module
func jsCreateShaderModule(device: js.Handle, code: string) => js.Handle
func Device.CreateShaderModule(code: string) => ShaderModule {
    s: ShaderModule
    s._extref = js.WrapExtObj(jsCreateShaderModule(this.GetHandle(), code))
    return s
}

func Device.CreateBuffer(desc: BufferDesc) => *Buffer {
    b: Buffer
    b.ExtObj = js.WrapExtObj(jsCreateBuffer(this.GetHandle(), desc.Label, desc.MappedAtCreation, desc.Size, desc.Usage))
    b._device = this.ExtObj
    b.desc = desc
    if desc.MappedAtCreation {
        b.mapped = true
        b.mappedRange = jsBufferGetMappedRange(b.GetHandle())
    }
    return &b
}
#wa:import webgpu create_buffer
func jsCreateBuffer(device: js.Handle, label: string, mappedAtCreation: bool, byteLen: int, usage: BufferUsage) => js.Handle

func Device.CreateTexture(desc: TextureDesc) => Texture {
    t: Texture
    d := desc.createExtObj()
    t.ExtObj = js.WrapExtObj(jsCreateTexture(this.GetHandle(), d.GetHandle()))
    return t
}
#wa:import webgpu create_texture
func jsCreateTexture(device: js.Handle, desc: js.Handle) => js.Handle

#wa:generic CreateSampler_Default
func Device.CreateSampler(desc: SamplerDesc) => Sampler {
    s: Sampler
    d := desc.createExtObj()
    s.ExtObj = js.WrapExtObj(jsCreateSampler(this.GetHandle(), d.GetHandle()))
    return s
}
#wa:import webgpu create_sampler
func jsCreateSampler(device, desc: js.Handle) => js.Handle

func Device.CreateSampler_Default() => Sampler {
    return this.CreateSampler(SamplerDesc{})
}

func Device.CopyExternalImageToTexture(src: js.ExtObj, dest: Texture) {
    jsCopyExternalImageToTexture(this.GetHandle(), src.GetHandle(), dest.GetHandle())
}
#wa:import webgpu copy_external_image_to_texture
func jsCopyExternalImageToTexture(device, src, dest: js.Handle)

#wa:import webgpu create_render_pipeline
func jsCreateRenderPipeline(device, pl_desc: js.Handle) => js.Handle
func Device.CreateRenderPipeline(desc: RenderPipelineDesc) => RenderPipeline {
    d := desc.createExtObj()
    p: RenderPipeline
    p.ExtObj = js.WrapExtObj(jsCreateRenderPipeline(this.GetHandle(), d.GetHandle()))

    return p
}

func Device.CreateBindGroup(desc: BindGroupDesc) => BindGroup {
    bg: BindGroup
    d := desc.createExtObj()
    bg.ExtObj = js.WrapExtObj(jsDeviceCreateBindGroup(this.GetHandle(), d.GetHandle()))

    return bg
}
#wa:import webgpu device_create_bind_group
func jsDeviceCreateBindGroup(device, bg_desc: js.Handle) => js.Handle

#wa:import webgpu create_command_encoder
func jsCreateCommandEncoder(device: js.Handle) => js.Handle
func Device.CreateCommandEncoder() => CommandEncoder {
    c: CommandEncoder
    c.ExtObj = js.WrapExtObj(jsCreateCommandEncoder(this.GetHandle()))

    return c
}

#wa:import webgpu create_render_bundle_encoder
func jsCreateRenderBundleEncoder(device, desc: js.Handle) => js.Handle
// 创建类型为 RenderBundleEncoder 的 RenderEncoder
func Device.CreateRenderBundleEncoder(desc: RenderBundleEncoderDesc) => RenderEncoder {
    re := RenderEncoder{Type: RenderEncoderType_RenderBundleEncoder}
    d := desc.createExtObj()
    re.ExtObj = js.WrapExtObj(jsCreateRenderBundleEncoder(this.GetHandle(), d.GetHandle()))

    return re
}

#wa:import webgpu submit
func jsSubmit(device, gpu_command_buffer: js.Handle)
func Device.Submit(gb: CommandBuffer) {
    jsSubmit(this.GetHandle(), gb.GetHandle())
}