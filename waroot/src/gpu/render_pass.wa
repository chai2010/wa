
import "js"

/*
不能使用该类型直接声明值，需通过 CommandEncoder.BeginRenderPass() 创建
该对象需每帧重建
*/
type PassEncoder struct {
    js.ExtObj
}

#wa:import webgpu set_render_pass_pipeline
func jsPassEncoderSetPipeline(render_pass, pipeline: js.Handle)
func PassEncoder.SetPipeline(p: RenderPipeline) {
    jsPassEncoderSetPipeline(this.GetHandle(), p.GetHandle())
}

#wa:import webgpu set_render_pass_bind_group
func jsPassEncoderSetBindGroup(render_pass: js.Handle, id: i32, bg: js.Handle)
func PassEncoder.SetBindGroup(id: i32, bg: BindGroup) {
    jsPassEncoderSetBindGroup(this.GetHandle(), id, bg.GetHandle())
}

#wa:import webgpu set_render_pass_vertex_buffer
func jsPassEncoderSetVertexBuffer(render_pass: js.Handle, slot: i32, buffer: js.Handle)
func PassEncoder.SetVertexBuffer(slot: i32, vb: *Buffer) {
    jsPassEncoderSetVertexBuffer(this.GetHandle(), slot, vb.GetHandle())
}

#wa:import webgpu set_render_pass_index_buffer
func jsSetRenderPassIndexBuffer(render_pass, buffer: js.Handle, typ: string)
func PassEncoder.SetIndexBuffer(ib: *Buffer, typ: string) {
    jsSetRenderPassIndexBuffer(this.GetHandle(), ib.GetHandle(), typ)
}

#wa:import webgpu draw_render_pass
func jsPassEncoderDraw(render_pass: js.Handle, vertex_count: i32)
func PassEncoder.Draw(vertex_count: i32) {
    jsPassEncoderDraw(this.GetHandle(), vertex_count)
}

#wa:import webgpu render_pass_draw_indexed
func jsPassEncoderDrawIndexed(render_pass: js.Handle, index_count: i32)
func PassEncoder.DrawIndexed(index_count: i32) {
    jsPassEncoderDrawIndexed(this.GetHandle(), index_count)
}

#wa:import webgpu pass_encoder_execute_bundles
func jsPassEncoderExecuteBundles(pass_encoder, render_bundle: js.Handle)
func PassEncoder.ExecuteBundles(bundles: []RenderBundle) {
    va := js.NewExtArray()
    for _, rb := range(bundles) {
        va.Append_obj(rb.ExtObj)
    }
    jsPassEncoderExecuteBundles(this.GetHandle(), va.GetHandle())
}

#wa:import webgpu end_render_pass
func jsPassEncoderEnd(render_pass: js.Handle)
func PassEncoder.End() {
    jsPassEncoderEnd(this.GetHandle())
}

#wa:import webgpu render_bundle_encoder_finish
func jsRenderBundleEncoderFinish(encoder: js.Handle) => js.Handle
func PassEncoder.Finish() => RenderBundle {
    bundle: RenderBundle
    bundle.ExtObj = js.WrapExtObj(jsRenderBundleEncoderFinish(this.GetHandle()))

    return bundle
}

