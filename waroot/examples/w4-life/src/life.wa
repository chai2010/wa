// 版权 @2023 life 作者。保留所有权利。

import "syscall/wasm4"

const (
	width  = wasm4.SCREEN_SIZE
	height = wasm4.SCREEN_SIZE
)

global (
	cells0    = NewBitImage(width, height)
	cells1    = NewBitImage(width, height)
	cellFrame = FramebufferInstance()

	pausing = false
)

func LifeStop {
	println("pausing:", pausing)
	pausing = true
}

func LifeStart {
	println("pausing:", pausing)
	pausing = false
}

func LifeInit {
	for i := range cells0.Pix {
		cells0.Pix[i] = 0
	}
	for i := range cells1.Pix {
		cells1.Pix[i] = 0
	}

	seed += u64(wasm4.GetMouseX() + 1)
	for x := 0; x < cells0.Width; x++ {
		for y := 0; y < cells0.Height; y++ {
			if (rand() % 3) != 0 {
				cells0.Set(x, y, true)
			} else {
				cells0.Set(x, y, false)
			}
		}
	}
}

func LifeSetRect(x0, y0, x1, y1: int) {
	for x := x0; x < x1; x++ {
		for y := y0; y < y1; y++ {
			cells0.Set(x, y, true)
		}
	}
}

type DIR :struct {
	x: int
	y: int
}

global dirs = [...]DIR{
	{-1, -1}, {0, -1}, {1, -1}, {-1, 0}, {1, 0}, {-1, 1}, {0, 1}, {1, 1},
}

// 生命进化
func lifeEvolve {
	for y := 0; y < height; y++ {
		for x := 0; x < width; x++ {
			live_count := 0
			for i := 0; i < 8; i++ {
				nx := (x + dirs[i].x + width) % width
				ny := (y + dirs[i].y + height) % height
				if cells0.At(nx, ny) {
					live_count++
				}
			}

			if cells0.At(x, y) {
				switch live_count {
				case 2, 3:
					cells1.Set(x, y, true)
				default:
					cells1.Set(x, y, false)
				}
			} else {
				switch live_count {
				case 3:
					cells1.Set(x, y, true)
				default:
					cells1.Set(x, y, false)
				}
			}
		}
	}

	// 交换 cells0 和 cells1
	cells0, cells1 = cells1, cells0
}

func LifeStep {
	if !pausing {
		lifeEvolve()
	}

	drawFrambuffer(cells0)
}

func drawFrambuffer(m: *BitImage) {
	for x := 0; x < width; x++ {
		for y := 0; y < height; y++ {
			if m.At(x, y) {
				cellFrame.Set(x, y, 4)
			} else {
				cellFrame.Set(x, y, 2)
			}
		}
	}
}
