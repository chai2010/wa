import (
	"syscall/wasm4"
)

type Letter :[]Tile

func getLetter(x: rune) => Letter {
	return nil
}

global letters_A = Letter{
	{ID: 2*12 + 6, Pos: Point{X: 0, Y: 0}},
	{ID: 2*12 + 7, Pos: Point{X: 1, Y: 0}},
	{ID: 3*12 + 6, Pos: Point{X: 0, Y: 1}},
	{ID: 3*12 + 7, Pos: Point{X: 1, Y: 1}},
}
global letters_D = Letter{
	{ID: 0*12 + 10, Pos: Point{X: 0, Y: 0}},
	{ID: 0*12 + 11, Pos: Point{X: 1, Y: 0}},
	{ID: 1*12 + 10, Pos: Point{X: 0, Y: 1}},
	{ID: 1*12 + 11, Pos: Point{X: 1, Y: 1}},
}

global letters_E = Letter{
	{ID: 2*12 + 6, Pos: Point{X: 0, Y: 0}},
	{ID: 2*12 + 7, Pos: Point{X: 0, Y: 1}},
	{ID: 3*12 + 6, Pos: Point{X: 1, Y: 0}},
	{ID: 3*12 + 7, Pos: Point{X: 1, Y: 1}},
}

global letters_I = Letter{
	{ID: 5*12 + 11, Pos: Point{X: 0, Y: 0}},
	{ID: 6*12 + 11, Pos: Point{X: 0, Y: 1}},
}

global letters_M = Letter{
	{ID: 0*12 + 6, Pos: Point{X: 0, Y: 0}},
	{ID: 1*12 + 6, Pos: Point{X: 0, Y: 1}},
	{ID: 7*12 + 11, Pos: Point{X: 1, Y: 0}},
	{ID: 8*12 + 11, Pos: Point{X: 1, Y: 1}},
}

global letters_N = Letter{
	{ID: 0*12 + 6, Pos: Point{X: 0, Y: 0}},
	{ID: 0*12 + 7, Pos: Point{X: 1, Y: 0}},
	{ID: 1*12 + 6, Pos: Point{X: 0, Y: 1}},
	{ID: 1*12 + 7, Pos: Point{X: 1, Y: 1}},
}

global letters_R = Letter{
	{ID: 2*12 + 10, Pos: Point{X: 0, Y: 0}},
	{ID: 2*12 + 11, Pos: Point{X: 1, Y: 0}},
	{ID: 3*12 + 10, Pos: Point{X: 0, Y: 1}},
	{ID: 3*12 + 11, Pos: Point{X: 1, Y: 1}},
}

global letters_S = Letter{
	{ID: 2*12 + 8, Pos: Point{X: 0, Y: 0}},
	{ID: 2*12 + 9, Pos: Point{X: 1, Y: 0}},
	{ID: 3*12 + 8, Pos: Point{X: 0, Y: 1}},
	{ID: 3*12 + 9, Pos: Point{X: 1, Y: 1}},
}

global letters_W = Letter{
	{ID: 7*12 + 10, Pos: Point{0, 0}},
	{ID: 8*12 + 10, Pos: Point{0, 1}},
	{ID: 0*12 + 7, Pos: Point{1, 0}},
	{ID: 1*12 + 7, Pos: Point{1, 1}},
}

global letters_minus = Letter{
	{ID: 1*12 + 2, Pos: Point{0, 0}},
}

global letters_4 = Letter{
	{ID: 9*12 + 10, Pos: Point{X: 0, Y: 0}},
	{ID: 9*12 + 11, Pos: Point{X: 1, Y: 0}},
	{ID: 10*12 + 10, Pos: Point{X: 0, Y: 1}},
	{ID: 10*12 + 11, Pos: Point{X: 1, Y: 1}},
}

func Letter.Draw(X, Y: int) {
	for _, tile := range *this {
		x := tile.Pos.X*8 + X*8
		y := tile.Pos.Y*8 + Y*8
		sx := uint(tile.ID%12) * 8
		sy := uint(tile.ID/12) * 8
		wasm4.BlitSub(tileset.Data,
			i32(x), i32(y), 8, 8, i32(sx), int32(sy),
			i32(tileset.Width), i32(tileset.Flags),
		)
	}
}
